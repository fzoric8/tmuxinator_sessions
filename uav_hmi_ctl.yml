# /home/zozan/.config/tmuxinator/openpose_ctl.yml

name: openpose_ctl
root: ~/
# Start local network between two PCs and enable multimaster for exchange of the body pose information 
# as fast as possible 
on_project_start:
  - docker start depthai_noetic_cont
  - docker start openpose_cont
  - docker start uav_ros_cont
on_project_exit:
  - docker stop openpose_cont
  - docker stop depthai_noetic_cont
  - docker stop uav_ros_cont 
windows:
  - openpose:
      layout: tiled
      # Synchronize all panes of this window, can be enabled before or after the pane commands run.
      # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'
      # synchronize: after
      panes:
        - ros_core:
          - waitForDockerContainer depthai_noetic_cont
          - docker exec -it depthai_noetic_cont bash
          - roscore
        - luxonis_ros:
          - waitForDockerContainer depthai_noetic_cont
          - docker exec -it depthai_noetic_cont bash
          - sleep 3
          - roslaunch depthai_ros_driver camera.launch rs_compat:=true
        - openpose_ros:
          - waitForDockerContainer openpose_cont
          - docker exec -it openpose_cont bash
          - sleep 8
          - roslaunch ros_openpose run.launch
        - h3d_cmd:
          - waitForDockerContainer openpose_cont
          - sleep 2
          - docker exec -it openpose_cont bash
          - waitFor /frame; roslaunch hpe_ros_package hpe_3d.launch
  - uav_ros_ctl:
      layout: tiled
      panes:
        - uav_ros_ctl:
          - docker exec -it uav_ros_cont bash
          - waitForDockerContainer uav_ros_cont
          - export SITL_RITW_TERMINAL="tmux new-window -d -n:ardupilot1"; waitForRos;
            roslaunch ardupilot_gazebo sim_vehicle.launch
            enable_console:=false
            additional_arguments:="--no-rebuild"
          - waitForRos; rosparam set use_sim_time true; roslaunch ardupilot_gazebo mavros.launch
  - gazebo:
      layout: tiled
      panes:
        - simulation:
          - docker exec -it uav_ros_cont bash
          - waitForDockerContainer uav_ros_cont
          - sleep 2
          - waitForRos; roslaunch ardupilot_gazebo kopterworx.launch use_sim_time:=true
  - arm&takeoff:
      layout: tiled
      panes:
        - ctl:
          - docker exec -it uav_ros_cont bash
          - sleep 3
          - waitForRos; roslaunch uav_ros_control pid_carrot.launch
        - takeoff:
          - docker exec -it uav_ros_cont bash
          - sleep 5
          - rosrun ardupilot_gazebo automatic_takeoff.sh
  - trajectory:
      layout: tiled
      panes:
        - traj_ctl:
          - docker exec -it uav_ros_cont bash
          - sleep 4
          - waitForRos; roslaunch uav_ros_tracker topp_tracker.launch

